import numpy as np
import matplotlib.pyplot as plt
from optimizer import *
from collections import OrderedDict


def f(x, y):
    return (1. / 20.) * (x ** 2.) + y ** 2


def df(x, y):
    return (1. / 10.) * x, 2. * y

optimizers = OrderedDict()
optimizers['SGD'] = SGD(lr=0.95)
optimizers['Momentum'] = Momentum(lr=0.1)
optimizers['AdaGrad'] = AdaGrad(lr=1.5)
optimizers['Adam'] = Adam(lr=0.3)
idx = 0
loss = {}
for key in optimizers.keys():
    optimizer = optimizers[key]
    params = {'x': -7, 'y': 2}
    grads = {'x': 0, 'y': 0}
    x_history = []
    y_history = []
    loss[key] = []

    for i in range(100):
        grads['x'], grads['y'] = df(params['x'], params['y'])

        optimizer.update(grads, params)
        x_history.append(params['x'])
        y_history.append(params['y'])
        loss[key].append(f(params['x'], params['y']))
    x = np.arange(-10, 10, 0.01)
    y = np.arange(-5, 5, 0.01)

    X, Y = np.meshgrid(x, y)
    Z = f(X, Y)
    Z[Z > 7] = 0

    idx += 1
    plt.subplot(2, 2, idx)
    plt.plot(x_history, y_history, 'o-', color="red")
    plt.contour(X, Y, Z)
    plt.ylim(-10, 10)
    plt.xlim(-10, 10)
    plt.plot(0, 0, '+')
    # colorbar()
    # spring()
    plt.title(key)
    plt.xlabel("x")
    plt.ylabel("y")
    print('type:%s,val=%s' % (key, f(params['x'], params['y'])))
plt.show()

for key, val in loss.items():
    plt.plot(val, label=key)
plt.ylim(0, 1)
plt.legend()
plt.show()
